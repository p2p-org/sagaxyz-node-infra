apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: default
spec:
  providerRef:
    name: default
  requirements:
  - key: node.kubernetes.io/instance-type
    operator: In
    values:
    - "{{ eks_nodegroup_instance_type }}"
  - key: karpenter.k8s.aws/instance-generation
    operator: Gt
    values:
    - "2"
  - key: "karpenter.sh/capacity-type" # Defaults to on-demand
    operator: In
    values: ["on-demand"]
  # Exclude small instance sizes
  - key: karpenter.k8s.aws/instance-size
    operator: NotIn
    values: [nano, micro, small, large]
  
  kubeletConfiguration:
    maxPods: {{ max_pods_per_node }}

  # Enables consolidation which attempts to reduce cluster cost by both removing un-needed nodes and down-sizing those
  # that can't be removed.  Mutually exclusive with the ttlSecondsAfterEmpty parameter.
  consolidation:
    enabled: true

  # If omitted, the feature is disabled and nodes will never expire.  If set to less time than it requires for a node
  # to become ready, the node may expire before any pods successfully start.
  # ttlSecondsUntilExpired: 2592000 # 30 Days = 60 * 60 * 24 * 30 Seconds;

---
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: default
spec:
  securityGroupSelector:
    karpenter.sh/discovery: "{{ eks_cluster_name }}"
  subnetSelector:
    karpenter.sh/discovery: "{{ eks_cluster_name }}"
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        iops: 10000
        encrypted: true
        deleteOnTermination: true
        throughput: 125
  tags:
    Name: "karpenter.sh/cluster/{{ eks_cluster_name }}"
