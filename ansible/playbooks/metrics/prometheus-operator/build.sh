#!/usr/bin/env bash

print_usage() {
  printf "Usage: build.sh -p <grafana-password> -h <cluster-base-url> [-a]"
}

is_ansible='false'

while getopts "p:h:a" flag
do
    case "${flag}" in
        p) grafana_pwd=${OPTARG};;
        h) cluster_base_url=${OPTARG};;
        a) is_ansible='true';;
        *) print_usage
           exit 1 ;;
    esac
done

if ! $is_ansible; then
  if [ -z "$grafana_pwd" ]
    then
      echo "The grafana admin password is a mandatory argument"
      print_usage
      exit 1
  fi
  if [ -z "$cluster_base_url" ]
    then
      echo "The cluster base url is a mandatory argument"
      print_usage
      exit 1
  fi
fi

set -o pipefail

# Make sure to use project tooling
PATH="$(pwd)/tmp/bin:${PATH}"

# Make sure to start with a clean 'manifests' dir
rm -rf manifests
mkdir -p manifests/setup

# Calling gojsontoyaml is optional, but we would like to generate yaml, not json
jsonnet -J vendor -m manifests cassiopeia.jsonnet --ext-str grafana_admin_password="${grafana_pwd}" --ext-str cluster_base_url="${cluster_base_url}" | xargs -I{} sh -c 'cat {} | gojsontoyaml > {}.yaml' -- {}

# Generate additional scrape configs secret
kubectl create secret generic additional-scrape-configs \
    --from-file=prometheus-additional.yaml --dry-run=client \
    --namespace sagasrv-metrics -oyaml > manifests/setup/additional-scrape-configs.yaml

# Make sure to remove json files
find manifests -type f ! -name '*.yaml' -delete
rm -f kustomization

if $is_ansible; then
  # Escape brackets for ansible compatibility
  if [[ "$OSTYPE" == "darwin"* ]]; then
    find manifests/ -name '*.yaml' -exec sed -i '' -e "s/{{/{% raw %}{{{% endraw %}/g" {} \;
    find manifests/ -name '*.yaml' -exec sed -i '' -e "s/}}/{% raw %}}}{% endraw %}/g" {} \;
  else
    find manifests/ -name '*.yaml' -exec sed -i -e "s/{{/{% raw %}{{{% endraw %}/g" {} \;
    find manifests/ -name '*.yaml' -exec sed -i -e "s/}}/{% raw %}}}{% endraw %}/g" {} \;
  fi
  # Remove grafana-config and grafana-ingress file since they will be generated by ansible
  rm manifests/grafana-config.yaml
  rm manifests/grafana-ingress.yaml
fi

# Collect all manifests into one
#for i in `ls manifests/setup/*.yaml`; do cat $i >> manifests/setup/full.yaml; echo "---" >> manifests/setup/full.yaml; done
#for i in `ls manifests/*.yaml`; do cat $i >> manifests/full.yaml; echo "---" >> manifests/full.yaml; done