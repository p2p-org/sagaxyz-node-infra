---
- hosts: eks_clusters
  gather_facts: false

  pre_tasks:
    - name: Install cloudformation dependencies
      ansible.builtin.pip:
        name:
          - boto3>=1.18.0
          - botocore>=1.21.0
        extra_args: --user

  vars_files:
    - vars/main.yml

  tasks:
    - name: Ensure VPC exists via CloudFormation.
      cloudformation:
        stack_name: "{{ eks_vpc_name }}"
        state: present
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        disable_rollback: false
        template: cloudformation/vpc.yml
        template_parameters:
          Region: "{{ aws_region }}"
          VPCName: "{{ eks_vpc_name }}"
        tags:
          stack: "{{ eks_vpc_name }}"
          application: "{{ eks_vpc_name }}"
      register: vpc_info

    - name: Add to stack_outputs.
      set_fact:
        stack_outputs: "{{ stack_outputs | combine(vpc_info['stack_outputs']) }}"

    - name: Ensure EKS Cluster exists via CloudFormation.
      cloudformation:
        stack_name: "{{ eks_cluster_name }}"
        state: present
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        disable_rollback: false
        template: cloudformation/eks-cluster.yml
        template_parameters:
          ClusterName: "{{ eks_cluster_name }}"
          Subnets: "{{ stack_outputs.Subnets }}"
          VpcId: "{{ stack_outputs.VpcId }}"
        tags:
          stack: "{{ eks_cluster_name }}"
          application: "{{ eks_cluster_name }}-app"
      register: eks_cluster_info

    - name: Add to stack_outputs.
      set_fact:
        stack_outputs: "{{ stack_outputs | combine(eks_cluster_info['stack_outputs']) }}"

    - name: Fetch the current instance type of the node group (if any)
      command: >
        aws eks describe-nodegroup
        --profile {{ aws_profile }}
        --region {{ aws_region }}
        --cluster-name {{ eks_cluster_name }}
        --nodegroup-name {{ eks_nodegroup_name }}
        --query "nodegroup.instanceTypes[0]"
        --output text
      ignore_errors: yes
      register: current_instance_type_output

    - name: Delete outdated EKS Node Group via CloudFormation.
      cloudformation:
        stack_name: "{{ eks_cluster_name }}-nodegroup"
        state: absent
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
      when:
        - not current_instance_type_output.failed
        - current_instance_type_output.stdout != ""
        - current_instance_type_output.stdout != eks_nodegroup_instance_type

    - name: Ensure EKS Node Group exists via CloudFormation.
      cloudformation:
        stack_name: "{{ eks_cluster_name }}-nodegroup"
        state: present
        region: "{{ aws_region }}"
        profile: "{{ aws_profile }}"
        disable_rollback: false
        template: cloudformation/eks-nodegroup.yml
        template_parameters:
          ClusterName: "{{ eks_cluster_name }}"
          NodeGroupName: "{{ eks_nodegroup_name }}"
          NodeGroupDesiredCapacity: "{{ eks_nodegroup_cluster_size }}"
          NodeInstanceType: "{{ eks_nodegroup_instance_type }}"
          NodeAmiType: "{{ eks_nodegroup_ami_type | default('AL2_x86_64') }}"
          Subnets: "{{ stack_outputs.Subnets }}"
        tags:
          stack: "{{ eks_cluster_name }}-nodegroup"
          application: "{{ eks_cluster_name }}-nodegroup-app"
      register: eks_nodegroup_info

    - name: Update kube config
      ansible.builtin.shell: "aws eks --region {{ aws_region }} update-kubeconfig --name {{ eks_cluster_name }} --kubeconfig {{ k8s_kubeconfig }} --profile {{ aws_profile }}"
