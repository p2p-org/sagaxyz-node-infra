---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ app.name }}-sa
  namespace: {{ app.namespace }}
  annotations:
    eks.amazonaws.com/role-arn: "{{ chainlet_role_info.arn }}"
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: {{ app.name }}
  namespace: {{ app.namespace }}
  labels:
    app: {{ app.name }}
spec:
  selector:
    matchLabels:
      app: {{ app.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ app.name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "26660"
    spec:
      serviceAccountName: {{ app.name }}-sa
      containers:
        - image: {{ container_image }}
          name: {{ app.name }}
          env:
          - name: UID
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.uid
          - name: KEYNAME
            value: {{ keyname }}
          - name: CHAINID
            value: {{ chain_id }}
          - name: MONIKER
            value: {{ moniker }}
          - name: KEYRING
            value: {{ conf.KEYRING }}
          - name: KEYALGO
            value: {{ conf.KEYALGO }}
          - name: LOGLEVEL
            value: {{ conf.LOGLEVEL }}
          - name: TRACE
            value: "{{ conf.TRACE }}"
          - name: SLEEPTIME
            value: "{{ conf.SLEEPTIME }}"
          - name: EXTERNAL_ADDRESS
{% if spc_external_address_host is defined %}
            value: "{{ spc_external_address_host }}"
{% else %}
            value: ""
{% endif %}
          - name: AWS_DEFAULT_REGION
            value: {{ aws_region }}
          - name: S3BUCKET
            value: {{ s3bucket }}
          - name: QUORUM_COUNT
            value: "{{ quorum_count }}"
          - name: VALIDATOR_ADDRESSES
            value: {{ validator_addresses }}
          - name: VALIDATOR_PROVIDER
            value: "{{ validator_provider }}"
          - name: ADDITIONAL_ARGS
            value: "{{ spc_additional_args }}"
          - name: KEYPASSWD
            value: "{{ keychain_password }}"
{% if voting_period is defined %}
          - name: VOTING_PERIOD
            value: {{ voting_period }}
{% endif %}
{% if node_rpc_domain is defined %}
          - name: NODE_RPC
            value: https://spc.{{ node_rpc_domain }}:443
{% endif %}
{% if stake_amount is defined %}
          - name: STAKE_AMOUNT
            value: "{{ stake_amount }}"
{% endif %}
{% if pruning_strategy is defined %}
          - name: PRUNING_STRATEGY
            value: {{ pruning_strategy }}
{% endif %}
{% if validator_provider == 1 %}
          - name: VALIDATOR_MNEMONIC
            value: {{ validator_mnemonic }}
          - name: STAKE_OWNER_ADDRESS
            value: {{ stake_owner_address }}
          - name: FOUNDATION_WALLET_ADDRESS
            value: {{ foundation_wallet_address }}
{% endif %}
          ports:
            - name: tmint-rpc-1-{{ app.name }}
              containerPort: 26656
            - name: tmint-rpc-2-{{ app.name }}
              containerPort: 26657
            - name: http
              containerPort: 1317
            - name: grpc
              containerPort: 9090
            - name: metrics
              containerPort: 26660
          volumeMounts:
          - name: saga-{{ app.name }}-persistent-storage
            mountPath: /root/.spc
          - name: "fluentd-logs"
            mountPath: "/var/log/saga"
            subPathExpr: $(UID)
      volumes:
      - name: saga-{{ app.name }}-persistent-storage
        persistentVolumeClaim:
          claimName: saga-{{ app.name }}-pvc
      - name: "fluentd-logs"
        hostPath:
          path: /var/log/saga
          type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Always
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: saga-{{ app.name }}-pvc
  namespace: {{ app.namespace }}
  labels:
    app: "{{ app.name }}"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ spc_volume_size }}"
